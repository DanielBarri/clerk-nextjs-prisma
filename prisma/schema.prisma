// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId   String    @id
  email     String    @unique
  name      String?
  surname   String?
  role      Role      @default(student)
  tests     Test[]
  createdAt DateTime
}

model Test {
  id            String         @id @default(uuid())
  user          User           @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  userId        String
  timeFinished  DateTime?
  prompt        String?
  analysis      String?
  testQuestions TestQuestion[]
  vocations     TestVocation[] 
  plans        Plan[]        // Relación one-to-many con Plan
}

model Question {
  id            String   @id @default(uuid())
  questionText  String   @unique
  answerOptions String[]
  createdAt     DateTime @default(now())
  testQuestions TestQuestion[]
}

model TestQuestion {
  id         String   @id @default(uuid())
  test       Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  userAnswer String?

  @@unique([testId, questionId])
}

model Vocation {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  plans     Plan[]
  selectedPlanId String?
  tests     TestVocation[] // Relación many-to-many
}

// Tabla intermedia para relación Test <-> Vocation
model TestVocation {
  id          String    @id @default(uuid())
  test        Test      @relation(fields: [testId], references: [id], onDelete: Cascade)
  testId      String
  vocation    Vocation  @relation(fields: [vocationId], references: [id], onDelete: Cascade)
  vocationId  String
  profile     String?
  justification String?

  @@unique([testId, vocationId])
}

model Plan {
  id         String   @id @default(uuid())
  vocation   Vocation @relation(fields: [vocationId], references: [id], onDelete: Cascade)
  vocationId String
  name       String
  description String
  createdAt  DateTime @default(now())
  topics     Topic[]
  selectedTopicId String?
  test      Test?    @relation(fields: [testId], references: [id], onDelete: SetNull)
testId    String?
  @@unique([vocationId, name])
}

model Topic {
  id        String   @id @default(uuid())
  plan      Plan     @relation(fields: [planId], references: [id], onDelete: Cascade)
  planId    String
  name      String
  description String
  position Int @default(0)
  createdAt DateTime @default(now())
  subtopics Subtopic[]
  selectedSubtopicId String?
  progress  Int @default(0)
  @@unique([planId, name])
}

model Subtopic {
  id        String   @id @default(uuid())
  topic     Topic    @relation(fields: [topicId], references: [id], onDelete: Cascade)
  topicId   String
  name      String
  description String
  position Int @default(0)
  createdAt DateTime @default(now())
  links     Link[]
  @@unique([topicId, name])
}

model Link {
  id         String   @id @default(uuid())
  subtopic   Subtopic @relation(fields: [subtopicId], references: [id], onDelete: Cascade)
  subtopicId String
  videoId      String
  thumbnail String
  title     String
  channelTitle String
  createdAt  DateTime @default(now())
}

enum Role {
  student
  teacher
  parent
  admin
}